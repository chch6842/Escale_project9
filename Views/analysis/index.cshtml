@model escale.Models.ScaleData

@{
  ViewData["Title"] = "食物份量記錄與建議";
  Layout = "_Layout";
}

@section Styles
{
  <link rel="stylesheet" href="@Url.Content("~/lib/ESCALE/Home/css/analysis.css")" />
}

<div class="container">
  <div class="header">食物份量記錄與建議</div>
  <div class="row">
    <div class="top">
      <div class="col-lg-6 col-md-12">
        <div class="left">
          <div class="chart-container">
            <canvas id="foodChart"></canvas>
          </div>
          <div class="checkbox-container">
            <label><input type="checkbox" class="food-checkbox" value="Grains" checked>全穀雜糧類</label>
            <label><input type="checkbox" class="food-checkbox" value="Protein" checked>豆魚蛋肉類</label>
            <label><input type="checkbox" class="food-checkbox" value="Dairy" checked>乳品類</label>
            <label><input type="checkbox" class="food-checkbox" value="Vegetables" checked>蔬菜類</label>
            <label><input type="checkbox" class="food-checkbox" value="Fruits" checked>水果類</label>
            <label><input type="checkbox" class="food-checkbox" value="OilsNuts" checked>油脂與堅果種子類</label>
            <button type="button" onclick="updateChart()">更新圖表</button>
          </div>
        </div>
      </div>
      <div class="col-lg-6 col-md-12">
        <div class="right">
          <div class="text-analysis">
            <p id="analysis"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="bottom">
      <div class="input-section">
        <div class="col">
          @using (Html.BeginForm("Index", "Analysis", new { area = "" }, FormMethod.Post))
          {
            <div class="form">
              <h2>請輸入食物份量</h2>
              <div class="food-input">
                <label>
                  <span>日期:</span>
                  <input type="date" id="RecordDate" name="RecordDate">
                </label>
                <label>
                  <span>全穀雜糧類:</span>
                  <input type="number" id="Grains" name="Grains" min="0"> 克
                </label>
                <label>
                  <span>豆魚蛋肉類:</span>
                  <input type="number" id="Protein" name="Protein" min="0"> 克
                </label>
                <label>
                  <span>乳品類:</span>
                  <input type="number" id="Dairy" name="Dairy" min="0"> 克
                </label>
                <label>
                  <span>蔬菜類:</span>
                  <input type="number" id="Vegetables" name="Vegetables" min="0"> 克
                </label>
                <label>
                  <span>水果類:</span>
                  <input type="number" id="Fruits" name="Fruits" min="0"> 克
                </label>
                <label>
                  <span>油脂與堅果種子類:</span>
                  <input type="number" id="OilsNuts" name="OilsNuts" min="0"> 克
                </label>
                <input type="submit" value="會員提交儲存到資料庫" class="btn btn-secondary btn-lg"></input>
                <button type="button" onclick="submitData()">提交即時觀看</button>
              </div>
            </div>
          }
        </div>
        <div class="col">
          <div class="calendar">
            <h2>請選擇起始和結束日期
              <p>
                <label>
                  起始日期: <input type="date" id="startDate">
                </label>
                <br>
                <label>
                  結束日期: <input type="date" id="endDate">
                </label>
                <br><br>
                <button type="submit" class="bottom-updateChart" onclick="updateChart()">查詢</button>
                <a href="@Url.Action("ColumnDatabase" , "CanvasJS" , new {area = ""})" class="button">
                  會員數據查詢
                </a>
              </p>
            </h2>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@section ScriptsBody {
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  @* <script src="@Url.Content("~/lib/ESCALE/Home/js/analysis.js")"></script> *@
  <script>
    const recommendedValues = {
      Grains: 300,
      Protein: 200,
      Dairy: 300,
      Vegetables: 400,
      Fruits: 300,
      OilsNuts: 50
    };

    const userValues = {
      Grains: {},
      Protein: {},
      Dairy: {},
      Vegetables: {},
      Fruits: {},
      OilsNuts: {}
    };

    const ctx = document.getElementById('foodChart').getContext('2d');
    let foodChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: []
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: '份量 (克)'
            }
          },
          x: {
            title: {
              display: true,
              text: '日期'
            }
          }
        }
      }
    });

    function updateChart() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const selectedItems = Array.from(document.querySelectorAll('.food-checkbox:checked')).map(checkbox => checkbox.value);

      if (!startDate || !endDate) {
        alert('請選擇起始和結束日期');
        return;
      }

      const start = new Date(startDate);
      const end = new Date(endDate);

      const labels = [];
      let dateCursor = new Date(start);

      while (dateCursor <= end) {
        labels.push(dateCursor.toISOString().split('T')[0]);
        dateCursor.setDate(dateCursor.getDate() + 1);
      }

      const datasets = selectedItems.map(item => {
        const data = labels.map(date => userValues[item][date] || 0);
        const color = getRandomColor();
        return {
          label: `${item} - 使用者`,
          data: data,
          borderColor: color,
          fill: false
        };
      });

      const recommendedDatasets = selectedItems.map(item => {
        const data = Array(labels.length).fill(recommendedValues[item]);
        const color = getRandomColor();
        return {
          label: `${item} - 建議`,
          data: data,
          borderColor: hexToRgbA(color, 0.5),
          backgroundColor: hexToRgbA(color, 0.2),
          fill: true
        };
      });

      foodChart.data.labels = labels;
      foodChart.data.datasets = datasets.concat(recommendedDatasets);
      foodChart.update();

      updateAnalysis(selectedItems, startDate, endDate);
    }

    function updateAnalysis(selectedItems, startDate, endDate) {
      const analysisElement = document.getElementById('analysis');
      analysisElement.innerHTML = '';

      const start = new Date(startDate);
      const end = new Date(endDate);

      selectedItems.forEach(item => {
        let userTotal = 0;
        let dateCursor = new Date(start);

        while (dateCursor <= end) {
          const dateString = dateCursor.toISOString().split('T')[0];
          userTotal += userValues[item][dateString] || 0;
          dateCursor.setDate(dateCursor.getDate() + 1);
        }

        const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
        const recommendedTotal = recommendedValues[item] * days;
        const difference = userTotal - recommendedTotal;
        let analysisText = '';

        if (difference > 0) {
          analysisText = `${item} 超出建議份量 ${difference} 克`;
        } else if (difference < 0) {
          analysisText = `${item} 缺少建議份量 ${Math.abs(difference)} 克`;
        } else {
          analysisText = `${item} 剛好達到建議份量`;
        }

        const dailyPercentage = ((userTotal - recommendedTotal) / recommendedTotal) * 100;
        analysisText += `，總對比：${dailyPercentage.toFixed(2)}%`;

        const paragraph = document.createElement('p');
        paragraph.textContent = analysisText;
        analysisElement.appendChild(paragraph);
      });
    }

    function submitData() {
      const inputDate = document.getElementById('RecordDate').value;

      if (!inputDate) {
        alert('請選擇日期');
        return;
      }

      userValues.Grains[inputDate] = parseInt(document.getElementById('Grains').value) || 0;
      userValues.Protein[inputDate] = parseInt(document.getElementById('Protein').value) || 0;
      userValues.Dairy[inputDate] = parseInt(document.getElementById('Dairy').value) || 0;
      userValues.Vegetables[inputDate] = parseInt(document.getElementById('Vegetables').value) || 0;
      userValues.Fruits[inputDate] = parseInt(document.getElementById('Fruits').value) || 0;
      userValues.OilsNuts[inputDate] = parseInt(document.getElementById('OilsNuts').value) || 0;

      alert('資料已儲存');
    }

    function getRandomColor() {
      const letters = '0123456789ABCDEF';
      let color = '#';
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    function hexToRgbA(hex, alpha) {
      let r = parseInt(hex.slice(1, 3), 16);
      let g = parseInt(hex.slice(3, 5), 16);
      let b = parseInt(hex.slice(5, 7), 16);

      return `rgba(${r},${g},${b},${alpha})`;
    }

    document.addEventListener('DOMContentLoaded', () => {
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('startDate').value = today;
      document.getElementById('endDate').value = today;
    });


  </script>

}
